
#include <iostream>
#define r return
using namespace std;
class calc{
int a,b;
public:
    calc(int a=0, int b=0):a(a),b(b){}
    void sh(){cout<<a<<"\t"<<b<<"\n";}
    /*(+-* /) (++ -- += -=) (! !=)  (> < >= )*/
    calc operator +(calc s)
    { calc e;
        e.a=this->a+s.a;
        e.b=this->b+s.b;
        return e;
    }
/*********************************************************************************************************************************************************/
    calc add(calc s, calc d)
    {a=s.a+d.a;b=s.b+s.b;return *this;}
/********************************************************************************************************************************************************/
    calc operator +(calc s)
    {a= this->a+s.a; b=this->b+s.b; return *this;}
/*********************************************************************************************************************************************************/
    calc operator -(calc s)
    {a= this->a-s.a; b=this->b-s.b;return *this;}
/*********************************************************************************************************************************************************/
    calc operator /(calc s)
    {a= this->a/s.a; b=this->b/s.b;return *this;}
/*********************************************************************************************************************************************************/
    calc operator *(calc s)
    {a= this->a*s.a; b=this->b*s.b;return *this;}
/*********************************************************************************************************************************************************/
    void operator ++(int)
    {this->a++; this->b++;}
/*********************************************************************************************************************************************************/
void operator ++()
    {++this->a; ++this->b;}
/*********************************************************************************************************************************************************/
    void operator +=(calc b)
    {this->a+=b.a;this->b+=b.b;}
/********************************************************************************************************************************************************/
    bool operator !()
    {if(a==0&&b==0) r 1; else r 0;}
/********************************************************************************************************************************************************/
    bool operator >(calc e)
    {return(a>e.a &&b>e.b);}
/********************************************************************************************************************************************************/
    bool operator <(calc e)
    {return(a<e.a &&b<e.b);}
/********************************************************************************************************************************************************/
    bool operator >=(calc e)
    {return(a>=e.a &&b>=e.b);}
/********************************************************************************************************************************************************/
    bool operator <=(calc e)
    {return(a<=e.a &&b<=e.b);}
/********************************************************************************************************************************************************/
};
int main()
{
calc s(10,10),s1(20,20),s2(30,30),sum;
/*sum=s+s1;*/ //sum.sh();
/*s+s1;*///s.sh();
//s++;s.sh();++s;
//s+=s2; s.sh();
//if(!sum)cout<<"!!!\n";
//if(s>s1) cout<<"s>s1\n";else cout<<"s<s1\n";
//if(s<s1) cout<<"s<s1\n";else cout<<"s>s1\n";
//if(s>=s1) cout<<"s>=s1\n";else cout<<"s=<s1\n";
//if(s=<s1) cout<<"s=<s1\n";else cout<<"s>=s1\n";

}
